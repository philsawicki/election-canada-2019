{"version":3,"file":"bundle.esm.js","sources":["../src/settings.ts","../src/data-builder.ts","../src/lib.ts","../src/utilities.ts","../src/application.ts","../src/main.ts"],"sourcesContent":["/**\r\n * Total number of seats in Parliament.\r\n */\r\nexport const TOTAL_NB_SEATS = 338;\r\n\r\n/**\r\n * Total number of registered electors.\r\n */\r\nexport const TOTAL_NB_REGISTERED_ELECTORS = 27126166;\r\n\r\n/**\r\n * Refresh interval for the data.\r\n */\r\nexport const REFRESH_INTERVAL = 60 * 1000;\r\n","import { TOTAL_NB_REGISTERED_ELECTORS, TOTAL_NB_SEATS } from './settings';\r\n\r\n\r\n/**\r\n * Build result data from the given CSV results.\r\n *\r\n * @param lineResults Viewmodel of the CSV result data.\r\n * @return The results built from the viewmodel of the CSV data.\r\n */\r\nexport function buildResultsFromCSVData(lineResults: ICSVResultLine[]): Results {\r\n    const preliminaryCirconscriptions = new Map<number, Circonscription>();\r\n    const validatedCirconscriptions = new Map<number, Circonscription>();\r\n    const iso8601DateMAJ = (new Date()).toISOString();\r\n\r\n    // Step #1: Record list of circonscriptions.\r\n    for (const lineResult of lineResults) {\r\n        const emptyCirconscriptionData: Circonscription = {\r\n            candidats: [],\r\n            isResultatsFinaux: false,\r\n            iso8601DateMAJ,\r\n            nbBureauComplete: -1,\r\n            nbBureauTotal: -1,\r\n            nbElecteurInscrit: -1,\r\n            nbVoteExerce: lineResult.totalNumberOfBallotsCast,\r\n            nbVoteRejete: lineResult.rejectedBallots,\r\n            nbVoteValide: lineResult.totalNumberOfBallotsCast - lineResult.rejectedBallots,\r\n            nomCirconscription: lineResult.electoralDistrictName,\r\n            numeroCirconscription: lineResult.electoralDistrictNumber,\r\n            tauxParticipation: '-1.0',\r\n            tauxVoteRejete: -1.0,\r\n            tauxVoteValide: -1.0\r\n        };\r\n\r\n        const circonscriptionNumber = lineResult.electoralDistrictNumber;\r\n        if (lineResult.typeOfResults === 'preliminary' && !preliminaryCirconscriptions.has(circonscriptionNumber)) {\r\n            preliminaryCirconscriptions.set(circonscriptionNumber, emptyCirconscriptionData);\r\n        } else if (lineResult.typeOfResults === 'validated' && !validatedCirconscriptions.has(circonscriptionNumber)) {\r\n            emptyCirconscriptionData.isResultatsFinaux = true;\r\n            validatedCirconscriptions.set(circonscriptionNumber, emptyCirconscriptionData);\r\n        }\r\n    }\r\n\r\n    // Step #2: Record data and candidates.\r\n    for (const lineResult of lineResults) {\r\n        const candidate: Candidat = {\r\n            abreviationPartiPolitique: getAbbreviationForParty(lineResult.politicalAffiliation),\r\n            nbVoteAvance: 0,\r\n            nbVoteTotal: lineResult.votesObtained,\r\n            nom: lineResult.surname,\r\n            nomPartiPolitique: lineResult.politicalAffiliation,\r\n            numeroCandidat: -1,\r\n            numeroPartiPolitique: -1,\r\n            prenom: lineResult.givenName,\r\n            tauxVote: lineResult.percentVotesObtained\r\n        };\r\n\r\n        const circonscriptionNumber = lineResult.electoralDistrictNumber;\r\n        if (lineResult.typeOfResults === 'preliminary') {\r\n            preliminaryCirconscriptions.get(circonscriptionNumber).candidats.push(candidate);\r\n        } else if (lineResult.typeOfResults === 'validated') {\r\n            validatedCirconscriptions.get(circonscriptionNumber).candidats.push(candidate);\r\n        }\r\n    }\r\n\r\n    const partyResults = new Map<number, Circonscription>();\r\n    for (const [ _, circonscriptionData ] of preliminaryCirconscriptions.entries()) {\r\n        const circonscriptionNumber = circonscriptionData.numeroCirconscription;\r\n        if (validatedCirconscriptions.has(circonscriptionNumber)) {\r\n            partyResults.set(circonscriptionNumber, validatedCirconscriptions.get(circonscriptionNumber));\r\n        } else {\r\n            partyResults.set(circonscriptionNumber, preliminaryCirconscriptions.get(circonscriptionNumber));\r\n        }\r\n    }\r\n    for (const [ _, circonscriptionData ] of validatedCirconscriptions.entries()) {\r\n        const circonscriptionNumber = circonscriptionData.numeroCirconscription;\r\n        if (!partyResults.has(circonscriptionNumber)) {\r\n            partyResults.set(circonscriptionNumber, validatedCirconscriptions.get(circonscriptionNumber));\r\n        }\r\n    }\r\n\r\n    // Step #3: Sort candidates.\r\n    for (const [ _, circonscriptionData ] of partyResults.entries()) {\r\n        circonscriptionData.candidats.sort((a, b) => {\r\n            if (a.nbVoteTotal > b.nbVoteTotal) {\r\n                return -1;\r\n            } else if (a.nbVoteTotal < b.nbVoteTotal) {\r\n                return 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    // Step #4: Compute votes in advance.\r\n    for (const [ _, circonscriptionData ] of partyResults.entries()) {\r\n        const nbCandidates = circonscriptionData.candidats.length;\r\n        if (nbCandidates >= 2) {\r\n            const [ first, second ] = circonscriptionData.candidats;\r\n            first.nbVoteAvance = first.nbVoteTotal - second.nbVoteTotal;\r\n        } else if (nbCandidates === 1) {\r\n            const onlyCandidate = circonscriptionData.candidats[0];\r\n            onlyCandidate.nbVoteAvance = onlyCandidate.nbVoteTotal;\r\n        }\r\n    }\r\n\r\n\r\n    const circonscriptions = Array.from(partyResults.values())\r\n        .sort((a, b) => a.nomCirconscription > b.nomCirconscription ? 1 : -1);\r\n    const nbCirconscription = TOTAL_NB_SEATS;\r\n    const nbCirconscriptionAvecResultat = circonscriptions.reduce((accumulator, circonscriptionData) => {\r\n        return accumulator + (circonscriptionData.nbVoteExerce > 0 ? 1 : 0);\r\n    }, 0);\r\n    const nbCirconscriptionSansResultat = nbCirconscription - nbCirconscriptionAvecResultat;\r\n    const nbVoteExerce = circonscriptions.reduce((accumulator, circonscriptionData) => {\r\n        return accumulator + circonscriptionData.nbVoteExerce;\r\n    }, 0);\r\n    const nbVoteValide = circonscriptions.reduce((accumulator, circonscriptionData) => {\r\n        return accumulator + circonscriptionData.nbVoteValide;\r\n    }, 0);\r\n    // Compute statistics for political parties:\r\n    const computeStatsForParties = (circonscriptionMap: Map<number, Circonscription>) => {\r\n        const parties = new Map<string, PartiPolitique>();\r\n        for (const [ _, circonscriptionData ] of circonscriptionMap.entries()) {\r\n            for (const candidat of circonscriptionData.candidats) {\r\n                const nomPartiPolitique = candidat.nomPartiPolitique;\r\n                if (!parties.has(nomPartiPolitique)) {\r\n                    parties.set(nomPartiPolitique, {\r\n                        abreviationPartiPolitique: getAbbreviationForParty(nomPartiPolitique),\r\n                        nbCirconscriptionsEnAvance: 0,\r\n                        nbVoteTotal: 0,\r\n                        nomPartiPolitique,\r\n                        numeroPartiPolitique: -1,\r\n                        tauxCirconscriptionsEnAvance: 0,\r\n                        tauxVoteTotal: 0\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const [ _, circonscriptionData ] of circonscriptionMap.entries()) {\r\n            for (const candidat of circonscriptionData.candidats) {\r\n                const nomPartiPolitique = candidat.nomPartiPolitique;\r\n                const partyStats = parties.get(nomPartiPolitique);\r\n                partyStats.nbVoteTotal += candidat.nbVoteTotal;\r\n                partyStats.tauxVoteTotal = nbVoteValide > 0\r\n                    ? partyStats.nbVoteTotal * 100 / nbVoteValide\r\n                    : 0;\r\n            }\r\n\r\n            const nbCandidates = circonscriptionData.candidats.length;\r\n            if (nbCandidates === 1\r\n                || (nbCandidates >= 2 && circonscriptionData.candidats[0].nbVoteAvance > 0)) {\r\n                const nomPartiPolitique = circonscriptionData.candidats[0].nomPartiPolitique;\r\n                parties.get(nomPartiPolitique).nbCirconscriptionsEnAvance++;\r\n            }\r\n        }\r\n\r\n        for (const [ _, partyData ] of parties.entries()) {\r\n            partyData.tauxCirconscriptionsEnAvance = partyData.nbCirconscriptionsEnAvance * 100 / TOTAL_NB_SEATS;\r\n        }\r\n\r\n        return Array.from(parties.values())\r\n            .sort((a, b) => {\r\n                if (a.nbCirconscriptionsEnAvance > b.nbCirconscriptionsEnAvance) {\r\n                    return -1;\r\n                } else if (a.nbCirconscriptionsEnAvance < b.nbCirconscriptionsEnAvance) {\r\n                    return 1;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            });\r\n    };\r\n\r\n    // Step #5: Record circonscription stats.\r\n    const statistiques = {\r\n        isResultatsFinaux: Array.from(validatedCirconscriptions.keys()).length === nbCirconscription,\r\n        iso8601DateMAJ,\r\n        nbBureauVote: -1,\r\n        nbBureauVoteRempli: -1,\r\n        nbCirconscription,\r\n        nbCirconscriptionAvecResultat,\r\n        nbCirconscriptionSansResultat,\r\n        nbElecteurInscrit: -1,\r\n        nbVoteExerce,\r\n        nbVoteRejete: circonscriptions.reduce((accumulator, circonscriptionData) => {\r\n            return accumulator + circonscriptionData.nbVoteRejete;\r\n        }, 0),\r\n        nbVoteValide,\r\n        partisPolitiques: computeStatsForParties(partyResults),\r\n        tauxBureauVoteRempli: -1,\r\n        tauxCirconscriptionSansResultat: nbCirconscriptionSansResultat * 100 / nbCirconscription,\r\n        tauxParticipationTotal: (nbVoteExerce * 100 / TOTAL_NB_REGISTERED_ELECTORS).toFixed(1) // '-1.0'\r\n    };\r\n\r\n    return {\r\n        circonscriptions,\r\n        statistiques\r\n    };\r\n}\r\n\r\n/**\r\n * Return the abbreviation for the given political party name.\r\n *\r\n * @param partyName Name of the political party for which to return the\r\n * abbreviation.\r\n * @return The abbreviation for the given political party.\r\n */\r\nexport function getAbbreviationForParty(partyName: string) {\r\n    switch (partyName) {\r\n        case 'Animal Protection Party':\r\n            return 'A.P.P.';\r\n        case 'Bloc Québécois':\r\n            return 'Bloc';\r\n        case 'CFF - Canada\\'s Fourth Front':\r\n            return 'C.F.F.';\r\n        case 'Christian Heritage Party':\r\n            return 'C.H.P.';\r\n        case 'Communist':\r\n            return 'Communist';\r\n        case 'Conservative':\r\n            return 'Conservative';\r\n        case 'Green Party':\r\n            return 'Green';\r\n        case 'Liberal':\r\n            return 'Liberal';\r\n        case 'Libertarian':\r\n            return 'L.P.';\r\n        // case 'Marxist-Leninist Party':\r\n        case 'ML':\r\n            return 'M.-L.P.';\r\n        case 'National Citizens Alliance':\r\n            return 'N.C.A.';\r\n        // case 'Canadian Nationalist':\r\n        case 'Nationalist':\r\n            return 'C.N.P.';\r\n        case 'NDP-New Democratic Party':\r\n            return 'N.D.P.';\r\n        case 'PC Party':\r\n            return 'PC Party';\r\n        case 'Pour l\\'Indépendance du Québec':\r\n            return 'P.I.Qc.';\r\n        case 'Parti Rhinocéros Party':\r\n            return 'P.R.';\r\n        case 'People\\'s Party':\r\n            return 'People\\'s Party';\r\n        case 'Progressive Canadian Party':\r\n            return 'P.C.P.';\r\n        case 'Radical Marijuana':\r\n            return 'R.M.';\r\n        case 'Stop Climate Change':\r\n            return 'S.C.C.';\r\n        // case 'The United Party':\r\n        case 'UPC':\r\n            return 'U.P.C.';\r\n        // case 'Veterans Coalition Party':\r\n        case 'VCP':\r\n            return 'V.C.P.';\r\n        case 'No Affiliation':\r\n        case 'Independent':\r\n        default:\r\n            return partyName;\r\n    }\r\n}\r\n","/**\r\n * Fetch results from Elections Canada.\r\n *\r\n * @returns A Promise to be fulfilled with the tab-delimited content text\r\n * content of the raw election results.\r\n */\r\nexport async function getRawResults() {\r\n    const response = await fetch('https://cors-anywhere.herokuapp.com/https://enr.elections.ca/DownloadResults.aspx?_=' + Date.now(), {\r\n        headers: {\r\n            'X-Requested-With': 'canada-election-results'\r\n        },\r\n        cache: 'no-cache'\r\n    });\r\n    return response.text();\r\n}\r\n\r\n/**\r\n * Parse the given CSV data into view model data.\r\n *\r\n * @param rawResults Parse data from raw CSV data.\r\n * @return The raw data parsed from the given CSV data.\r\n */\r\nexport function formatRawResults(rawResults: string): ICSVResultLine[] {\r\n    return rawResults.split('\\n')\r\n        .filter((line, lineIndex, allLines) => {\r\n            return lineIndex > 1 && lineIndex < allLines.length - 4 && line.length > 0;\r\n        })\r\n        .map(line => {\r\n            const [\r\n                electoralDistrictNumber,\r\n                electoralDistrictName,\r\n                electoralDistrictNameFr,\r\n                typeOfResults,\r\n                typeOfResultsFr,\r\n                surname,\r\n                middleName,\r\n                givenName,\r\n                politicalAffiliation,\r\n                politicalAffiliationFr,\r\n                votesObtained,\r\n                percentVotesObtained,\r\n                rejectedBallots,\r\n                totalNumberOfBallotsCast ] = line.split('\\t');\r\n\r\n            return {\r\n                electoralDistrictNumber: parseInt(electoralDistrictNumber, 10),\r\n                electoralDistrictName,\r\n                typeOfResults: typeOfResults.toLowerCase() === 'validated' ? 'validated' : 'preliminary',\r\n                surname,\r\n                middleName,\r\n                givenName,\r\n                politicalAffiliation,\r\n                votesObtained: parseInt(votesObtained, 10),\r\n                percentVotesObtained: parseFloat(percentVotesObtained),\r\n                rejectedBallots: parseInt(rejectedBallots, 10),\r\n                totalNumberOfBallotsCast: parseInt(totalNumberOfBallotsCast, 10)\r\n            };\r\n        });\r\n}\r\n","/**\r\n * \"cyrb53\" hashing function.\r\n *\r\n * @param str Text to hash.\r\n * @param seed Hashing seed.\r\n * @returns The hash value of the given text.\r\n */\r\nexport function hash(str: string, seed: number = 0) {\r\n    let hash1 = 0xdeadbeef ^ seed;\r\n    let hash2 = 0x41c6ce57 ^ seed;\r\n\r\n    for (let i = 0, ch; i < str.length; ++i) {\r\n        ch = str.charCodeAt(i);\r\n        hash1 = Math.imul(hash1 ^ ch, 2654435761);\r\n        hash2 = Math.imul(hash2 ^ ch, 1597334677);\r\n    }\r\n\r\n    hash1 = Math.imul(hash1 ^ hash1 >>> 16, 2246822507) ^ Math.imul(hash2 ^ hash2 >>> 13, 3266489909);\r\n    hash2 = Math.imul(hash2 ^ hash2 >>> 16, 2246822507) ^ Math.imul(hash1 ^ hash1 >>> 13, 3266489909);\r\n\r\n    return 4294967296 * (2097151 & hash2) + (hash1 >>> 0);\r\n}\r\n\r\n/**\r\n * Generate gradient step colors.\r\n *\r\n * @param from Gradient start color (in hex format).\r\n * @param to Gradient end color (in hex format).\r\n * @param nbSteps Number of gradient steps to generate.\r\n */\r\nexport function generateColorGradient(from: string, to: string, nbSteps: number) {\r\n    const parsedFrom = from.replace('#', '');\r\n    const splitFrom = [\r\n        parseInt(parsedFrom.substr(0, 2), 16),\r\n        parseInt(parsedFrom.substr(2, 2), 16),\r\n        parseInt(parsedFrom.substr(4, 2), 16)\r\n    ];\r\n\r\n    const parsedTo = to.replace('#', '');\r\n    const splitTo = [\r\n        parseInt(parsedTo.substr(0, 2), 16),\r\n        parseInt(parsedTo.substr(2, 2), 16),\r\n        parseInt(parsedTo.substr(4, 2), 16)\r\n    ];\r\n\r\n    const colorRanges = [\r\n        splitTo[0] - splitFrom[0],\r\n        splitTo[1] - splitFrom[1],\r\n        splitTo[2] - splitFrom[2]\r\n    ];\r\n\r\n    const gradientColors: string[] = [];\r\n    for (let i = 0; i <= nbSteps; ++i) {\r\n        const colorStep = [\r\n            Math.floor(splitFrom[0] + colorRanges[0] * i / nbSteps).toString(16),\r\n            Math.floor(splitFrom[1] + colorRanges[1] * i / nbSteps).toString(16),\r\n            Math.floor(splitFrom[2] + colorRanges[2] * i / nbSteps).toString(16)\r\n        ];\r\n        gradientColors.push(`#${ colorStep.join('') }`);\r\n    }\r\n    return gradientColors;\r\n}\r\n","import { ALL_PARTIES_AGGREGATE_RESULTS } from '../__tests__/content';\r\nimport { buildResultsFromCSVData, getAbbreviationForParty } from './data-builder';\r\nimport { formatRawResults, getRawResults } from './lib';\r\nimport { REFRESH_INTERVAL, TOTAL_NB_REGISTERED_ELECTORS, TOTAL_NB_SEATS } from './settings';\r\nimport { generateColorGradient } from './utilities';\r\n\r\n\r\n/**\r\n * Application.\r\n */\r\nexport default class Application {\r\n    /**\r\n     * Chart for the number of Votes per Party.\r\n     */\r\n    protected VotesChart: Chart = null;\r\n    /**\r\n     * Chart for the number of Seats per Party.\r\n     */\r\n    protected SeatsChart: Chart = null;\r\n    /**\r\n     * ID of the Riding currently being displayed.\r\n     */\r\n    protected SelectedRidingID: number = -1;\r\n    /**\r\n     * List of Riding data.\r\n     */\r\n    protected Ridings: Circonscription[] = [];\r\n    /**\r\n     * Maximum number of parties to display on Charts.\r\n     */\r\n    protected readonly MAX_PARTIES_COUNT_FOR_CHARTS = 8;\r\n\r\n\r\n    /**\r\n     * Constructor.\r\n     */\r\n    constructor() {\r\n        this.installListeners();\r\n        // this.setupCharts();\r\n        this.fetchData();\r\n    }\r\n\r\n    /**\r\n     * Create Charts for number of Votes and Seats per Party.\r\n     */\r\n    protected setupCharts() {\r\n        const initialData: number[] = [];\r\n\r\n        const createChartConfig = (gradientFrom: string, gradientTo: string) => {\r\n            const colorPalette = generateColorGradient(gradientFrom, gradientTo, this.MAX_PARTIES_COUNT_FOR_CHARTS);\r\n\r\n            return {\r\n                type: 'doughnut',\r\n                data: {\r\n                    datasets: [{\r\n                        data: initialData,\r\n                        borderWidth: Array(this.MAX_PARTIES_COUNT_FOR_CHARTS + 3).fill(0), // Enough values for a lot of parties.\r\n                        backgroundColor: colorPalette,\r\n                        hoverBackgroundColor: colorPalette\r\n                    }]\r\n                },\r\n                options: {\r\n                    cutoutPercentage: 90,\r\n                    legend: {\r\n                        position: 'left'\r\n                    },\r\n                    animation: {\r\n                        animateRotate: true\r\n                    },\r\n                    elements: {\r\n                        center: {\r\n                            text: '',\r\n                            color: '#8a8d93',\r\n                            fontStyle: 'Muli, sans-serif'\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        };\r\n\r\n        // Create \"Seats\" Chart:\r\n        // Gradient palette: ['#da4d60', '#e96577', '#f28695', '#ffb6c1', '#e5e5e5']\r\n        const seatsCanvas = document.getElementById('seats') as HTMLCanvasElement;\r\n        if (seatsCanvas !== null) {\r\n            this.SeatsChart = new Chart(\r\n                seatsCanvas,\r\n                createChartConfig('#da4d60', '#e5e5e5')\r\n            );\r\n        }\r\n\r\n        // Create \"Votes\" Chart:\r\n        // Gradient palette: ['#6933b9', '#8553d1', '#a372ec', '#be9df1', '#e5e5e5']\r\n        const votesCanvas = document.getElementById('votes') as HTMLCanvasElement;\r\n        if (votesCanvas !== null) {\r\n            this.VotesChart = new Chart(\r\n                votesCanvas,\r\n                createChartConfig('#6933b9', '#e5e5e5')\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Install DOM Listeners.\r\n     */\r\n    protected installListeners() {\r\n        const ridingsDropDownElement = document.getElementById('ridings-list') as HTMLSelectElement;\r\n        if (ridingsDropDownElement !== null) {\r\n            ridingsDropDownElement.addEventListener('change', e => {\r\n                this.SelectedRidingID = parseInt(ridingsDropDownElement.options[ridingsDropDownElement.selectedIndex].value, 10);\r\n                const selectedRiding = this.Ridings.filter(riding => riding.numeroCirconscription === this.SelectedRidingID);\r\n                this.updateRiding(selectedRiding[0]);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetch results from the remote web service.\r\n     */\r\n    protected async fetchData() {\r\n        try {\r\n            const rawResults = /*ALL_PARTIES_AGGREGATE_RESULTS; /*/ await getRawResults();\r\n            const lines = await formatRawResults(rawResults);\r\n            const data = buildResultsFromCSVData(lines);\r\n\r\n            this.onResultsLoaded(data);\r\n        } catch (ex) {\r\n            // tslint:disable-next-line:no-console\r\n            console.error(ex);\r\n        } finally {\r\n            setTimeout(() => {\r\n                this.fetchData();\r\n            }, REFRESH_INTERVAL);\r\n\r\n            // setTimeout(async () => {\r\n            //     const lines = await formatRawResults(ALL_PARTIES_AGGREGATE_RESULTS);\r\n            //     const data = buildResultsFromCSVData(lines);\r\n\r\n            //     this.onResultsLoaded(data);\r\n            // }, 5 * 1000);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback executed upon loading results from the remote web service.\r\n     *\r\n     * @param results Results loaded from the remote web service.\r\n     */\r\n    protected onResultsLoaded(results: Results) {\r\n        const sortedParties = [...results.statistiques.partisPolitiques]\r\n            .sort((a, b) => {\r\n                // Number of ridings in advance first:\r\n                if (a.nbCirconscriptionsEnAvance > b.nbCirconscriptionsEnAvance) {\r\n                    return -1;\r\n                } else if (a.nbCirconscriptionsEnAvance < b.nbCirconscriptionsEnAvance) {\r\n                    return 1;\r\n                } else {\r\n                    // Number of total votes second:\r\n                    if (a.nbVoteTotal > b.nbVoteTotal) {\r\n                        return -1;\r\n                    } else if (a.nbVoteTotal < b.nbVoteTotal) {\r\n                        return 1;\r\n                    } else {\r\n                        // Alphabetical last:\r\n                        if (a.nomPartiPolitique > b.nomPartiPolitique) {\r\n                            return 1;\r\n                        } else if (a.nomPartiPolitique < b.nomPartiPolitique) {\r\n                            return -1;\r\n                        } else {\r\n                            return 0;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n        const partiesList = document.getElementById('parties-list');\r\n        if (partiesList !== null) {\r\n            partiesList.innerHTML = sortedParties\r\n                .map((party, i) => {\r\n                    return `\r\n                        <tr>\r\n                            <th scope=\"row\" class=\"text-right\">${party.nbCirconscriptionsEnAvance > 0 ? i + 1 : ''}</th>\r\n                            <td>${party.nomPartiPolitique}</td>\r\n                            <td>${getAbbreviationForParty(party.abreviationPartiPolitique)}</td>\r\n                            <td class=\"text-right\">${party.tauxVoteTotal.toFixed(2)}<small>&nbsp;%</small></td>\r\n                            <td class=\"text-right\">${party.nbCirconscriptionsEnAvance}</td>\r\n                        </tr>`;\r\n                })\r\n                .join('');\r\n        }\r\n\r\n        // Store data about the Ridings:\r\n        this.Ridings = results.circonscriptions;\r\n\r\n        // Update dashboard data:\r\n        this.updateOverviewStats(results);\r\n        this.updateStationsRidingsResults(results);\r\n        this.updateRidings(results);\r\n        if (this.SeatsChart === null && this.VotesChart === null) {\r\n            this.setupCharts();\r\n        }\r\n        this.drawVotesChart(results);\r\n        this.drawSeatsChart(results);\r\n    }\r\n\r\n    /**\r\n     * Update results for the top 4 political parties.\r\n     *\r\n     * @param results Results loaded from the remote web service.\r\n     */\r\n    protected updateOverviewStats(results: Results) {\r\n        const resultCards = document.querySelectorAll('.result-card');\r\n        const nbResults = Math.min(\r\n            resultCards.length,\r\n            results.statistiques.partisPolitiques.length\r\n        );\r\n\r\n        for (let i = 0; i < nbResults; ++i) {\r\n            const party = results.statistiques.partisPolitiques[i];\r\n            if (party.tauxCirconscriptionsEnAvance > 0) {\r\n                const resultCard = resultCards[i];\r\n\r\n                const partyName: HTMLDivElement = resultCard.querySelector('.party-name');\r\n                if (partyName !== null) {\r\n                    partyName.innerText = party.abreviationPartiPolitique;\r\n                }\r\n\r\n                const seatCounter: HTMLDivElement = resultCard.querySelector('.count');\r\n                if (seatCounter !== null) {\r\n                    seatCounter.innerText = party.nbCirconscriptionsEnAvance.toString();\r\n                }\r\n\r\n                const seatsLabel: HTMLDivElement = resultCard.querySelector('.seats-label');\r\n                if (seatsLabel !== null) {\r\n                    seatsLabel.innerText = `seat${party.nbCirconscriptionsEnAvance > 1 ? 's' : ''}`;\r\n                }\r\n\r\n                const voteProgressBar: HTMLDivElement = resultCard.querySelector(`.dashbg-${i + 1}`);\r\n                if (voteProgressBar !== null) {\r\n                    voteProgressBar.style.width = `${party.tauxCirconscriptionsEnAvance}%`;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update polling station results.\r\n     *\r\n     * @param results Results loaded from the remote web service.\r\n     */\r\n    protected updateStationsRidingsResults(results: Results) {\r\n        const { statistiques } = results;\r\n\r\n        const stationsResults = document.querySelector('.stations-results');\r\n        if (stationsResults !== null) {\r\n            const count: HTMLElement = stationsResults.querySelector('.count');\r\n            if (count !== null && statistiques.nbBureauVoteRempli >= 0) {\r\n                count.innerText = statistiques.nbBureauVoteRempli.toLocaleString();\r\n            }\r\n\r\n            const progressBar: HTMLDivElement = stationsResults.querySelector('div[role=\"progressbar\"]');\r\n            if (progressBar !== null) {\r\n                progressBar.style.width = `${statistiques.tauxBureauVoteRempli}%`;\r\n            }\r\n        }\r\n\r\n        const ridingsResults = document.querySelector('.ridings-results');\r\n        if (ridingsResults !== null) {\r\n            const count: HTMLElement = ridingsResults.querySelector('.count');\r\n            if (count !== null) {\r\n                count.innerText = statistiques.nbCirconscriptionAvecResultat.toLocaleString();\r\n            }\r\n\r\n            const progressBar: HTMLDivElement = ridingsResults.querySelector('div[role=\"progressbar\"]');\r\n            if (progressBar !== null) {\r\n                progressBar.style.width = `${100.0 - statistiques.tauxCirconscriptionSansResultat}%`;\r\n            }\r\n        }\r\n\r\n        if (statistiques.nbVoteExerce > 0) {\r\n            const votesCast = document.getElementById('votes-cast');\r\n            if (votesCast !== null) {\r\n                votesCast.innerText = statistiques.nbVoteExerce.toLocaleString();\r\n            }\r\n            const partPercent = document.getElementById('part-rate');\r\n            if (partPercent !== null) {\r\n                partPercent.style.width = `${statistiques.tauxParticipationTotal}%`;\r\n            }\r\n\r\n            const validVotes = document.getElementById('valid-votes');\r\n            if (validVotes !== null) {\r\n                validVotes.innerText = statistiques.nbVoteValide.toLocaleString();\r\n            }\r\n            const validVotesRate = document.getElementById('valid-votes-rate');\r\n            if (validVotesRate !== null) {\r\n                validVotesRate.style.width = `${statistiques.nbVoteValide * 100 / statistiques.nbVoteExerce}%`;\r\n            }\r\n\r\n            const rejectedVotes = document.getElementById('rejected-votes');\r\n            if (rejectedVotes !== null) {\r\n                rejectedVotes.innerText = statistiques.nbVoteRejete.toLocaleString();\r\n            }\r\n            const rejectedVoteRate = document.getElementById('rejected-vote-rate');\r\n            if (rejectedVoteRate !== null) {\r\n                rejectedVoteRate.style.width = `${statistiques.nbVoteRejete * 100 / statistiques.nbVoteExerce}%`;\r\n            }\r\n\r\n            const participationRate = document.getElementById('participation-rate');\r\n            const participationRateValue = parseFloat(statistiques.tauxParticipationTotal);\r\n            if (participationRate !== null && participationRateValue >= 0) {\r\n                const participationRateLabel = isNaN(participationRateValue)\r\n                    ? '&mdash;'\r\n                    : `${participationRateValue}%`;\r\n                participationRate.innerHTML = participationRateLabel;\r\n            }\r\n        }\r\n\r\n\r\n        // Update the timestamp of the last refresh time:\r\n        const lastUpdatedDate = document.getElementById('last-update-date');\r\n        const lastUpdateTime = document.getElementById('last-update-time');\r\n        if (lastUpdatedDate !== null && lastUpdateTime !== null) {\r\n            const lastUpdateDate = new Date(\r\n                Date.parse(statistiques.iso8601DateMAJ.replace(',', '.'))\r\n            );\r\n            lastUpdatedDate.innerText = lastUpdateDate.toLocaleDateString();\r\n            lastUpdateTime.innerText = lastUpdateDate.toLocaleTimeString();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the Chart for the number of Seats per Party.\r\n     *\r\n     * @param results Results loaded from the remote web service.\r\n     */\r\n    protected drawSeatsChart(results: Results) {\r\n        const { statistiques } = results;\r\n\r\n        // const currentNBSeats = statistiques.partisPolitiques\r\n        //     .reduce((accumulator, currentParty) => {\r\n        //         return accumulator + currentParty.nbCirconscriptionsEnAvance;\r\n        //     }, 0);\r\n        // const seats = [\r\n        //     ...statistiques.partisPolitiques\r\n        //         .filter(party => party.nbCirconscriptionsEnAvance > 0)\r\n        //         .map(party => party.nbCirconscriptionsEnAvance),\r\n        //     TOTAL_NB_SEATS - currentNBSeats\r\n        // ];\r\n        // let labels = statistiques.partisPolitiques\r\n        //     .filter((party, index) => {\r\n        //         return party.nbCirconscriptionsEnAvance > 0 && index < this.MAX_PARTIES_COUNT_FOR_CHARTS;\r\n        //     })\r\n        //     .map(party => party.abreviationPartiPolitique);\r\n        // if (seats.length === 1) {\r\n        //     labels = ['N./A.'];\r\n        // } else if (seats.length >= this.MAX_PARTIES_COUNT_FOR_CHARTS) {\r\n        //     labels.push('Others');\r\n        // }\r\n\r\n        const sortedPartiesWithSeats = [...statistiques.partisPolitiques]\r\n            .filter(party => party.nbVoteTotal > 0)\r\n            .sort((a, b) => {\r\n                if (a.nbCirconscriptionsEnAvance > b.nbCirconscriptionsEnAvance) {\r\n                    return -1;\r\n                } else if (a.nbCirconscriptionsEnAvance > b.nbCirconscriptionsEnAvance) {\r\n                    return 1;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            });\r\n        let seats: number[] = [];\r\n        let labels: string[] = [];\r\n        if (sortedPartiesWithSeats.length > this.MAX_PARTIES_COUNT_FOR_CHARTS) {\r\n            const dataWithLabels = sortedPartiesWithSeats\r\n                .filter((_, index) => index < this.MAX_PARTIES_COUNT_FOR_CHARTS);\r\n            seats = [\r\n                ...dataWithLabels.map(party => party.nbCirconscriptionsEnAvance),\r\n                sortedPartiesWithSeats\r\n                    .filter((_, index) => index >= this.MAX_PARTIES_COUNT_FOR_CHARTS)\r\n                    .reduce((accumulator, party) => accumulator + party.nbCirconscriptionsEnAvance, 0)\r\n            ];\r\n            labels = [\r\n                ...dataWithLabels.map(party => party.abreviationPartiPolitique),\r\n                'Others'\r\n            ];\r\n        } else {\r\n            seats = sortedPartiesWithSeats.map(party => party.nbCirconscriptionsEnAvance);\r\n            labels = sortedPartiesWithSeats.map(party => party.abreviationPartiPolitique);\r\n        }\r\n        seats.push(0);\r\n        seats.push(\r\n            TOTAL_NB_SEATS - seats\r\n                .reduce((accumulator, partyVotes) => accumulator + partyVotes, 0)\r\n        );\r\n\r\n        if (this.SeatsChart !== null) {\r\n            // const colors = this.SeatsChart.data.datasets[0].backgroundColor;\r\n            // let colorPalette = generateColorGradient(\r\n            //     colors[0], // Gradient start color\r\n            //     colors[colors.length - 1], // Gradient end color\r\n            //     labels.length // Number of gradient steps to generate\r\n            // );\r\n            // if (labels.length < 2) {\r\n            //     colorPalette = [ colorPalette[0] ];\r\n            // }\r\n\r\n            this.SeatsChart.data.labels = labels;\r\n            this.SeatsChart.data.datasets[0].data = seats;\r\n            // this.SeatsChart.data.datasets[0].backgroundColor = colorPalette;\r\n            // this.SeatsChart.data.datasets[0].hoverBackgroundColor = colorPalette;\r\n            this.SeatsChart.options.elements.center.text = labels[0];\r\n            this.SeatsChart.update();\r\n        }\r\n\r\n        const leadingPartyLabel = document.getElementById('leading-party-by-seats');\r\n        if (leadingPartyLabel !== null && labels.length > 0) {\r\n            leadingPartyLabel.innerText = labels[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the Chart for the number of Votes per Party.\r\n     *\r\n     * @param results Results loaded from the remote web service.\r\n     */\r\n    protected drawVotesChart(results: Results) {\r\n        const { statistiques } = results;\r\n\r\n        const sortedPartiesWithVotes = [...statistiques.partisPolitiques]\r\n            .filter(party => party.nbVoteTotal > 0)\r\n            .sort((a, b) => {\r\n                if (a.nbVoteTotal > b.nbVoteTotal) {\r\n                    return -1;\r\n                } else if (a.nbVoteTotal > b.nbVoteTotal) {\r\n                    return 1;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            });\r\n        let votes: number[] = [];\r\n        let labels: string[] = [];\r\n        if (sortedPartiesWithVotes.length > this.MAX_PARTIES_COUNT_FOR_CHARTS) {\r\n            const dataWithLabels = sortedPartiesWithVotes\r\n                .filter((_, index) => index < this.MAX_PARTIES_COUNT_FOR_CHARTS);\r\n            votes = [\r\n                ...dataWithLabels.map(party => party.nbVoteTotal),\r\n                sortedPartiesWithVotes\r\n                    .filter((_, index) => index >= this.MAX_PARTIES_COUNT_FOR_CHARTS)\r\n                    .reduce((accumulator, party) => accumulator + party.nbVoteTotal, 0)\r\n            ];\r\n            labels = [\r\n                ...dataWithLabels.map(party => party.abreviationPartiPolitique),\r\n                'Others'\r\n            ];\r\n        } else {\r\n            votes = sortedPartiesWithVotes.map(party => party.nbVoteTotal);\r\n            labels = sortedPartiesWithVotes.map(party => party.abreviationPartiPolitique);\r\n        }\r\n        votes.push(0);\r\n        votes.push(\r\n            TOTAL_NB_REGISTERED_ELECTORS - votes\r\n                .reduce((accumulator, partyVotes) => accumulator + partyVotes, 0)\r\n        );\r\n\r\n        if (this.VotesChart !== null) {\r\n            // const colors = this.VotesChart.data.datasets[0].backgroundColor;\r\n            // let colorPalette = generateColorGradient(\r\n            //     this.VotesStartColor, //colors[0], // Gradient start color\r\n            //     colors[colors.length - 1], // Gradient end color\r\n            //     //labels.length // Number of gradient steps to generate\r\n            //     this.MAX_PARTIES_COUNT_FOR_CHARTS + 2\r\n            // );\r\n            // if (labels.length < 2) {\r\n            //     // colorPalette = [ colorPalette[0] ];\r\n            // }\r\n\r\n            this.VotesChart.data.labels = labels;\r\n            this.VotesChart.data.datasets[0].data = votes;\r\n            // this.VotesChart.data.datasets[0].backgroundColor = colorPalette;\r\n            // this.VotesChart.data.datasets[0].hoverBackgroundColor = colorPalette;\r\n            this.VotesChart.options.elements.center.text = labels[0];\r\n            this.VotesChart.update();\r\n        }\r\n\r\n        const leadingPartyLabel = document.getElementById('leading-party-by-votes');\r\n        if (leadingPartyLabel !== null && labels.length > 0) {\r\n            leadingPartyLabel.innerText = labels[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the data about the Riding currently displayed.\r\n     *\r\n     * @param results Results loaded from the remote web service.\r\n     */\r\n    protected updateRidings(results: Results) {\r\n        // Update the list of available ridings:\r\n        const ridingsDropDownElement = document.getElementById('ridings-list');\r\n        if (ridingsDropDownElement !== null) {\r\n            ridingsDropDownElement.innerHTML = results.circonscriptions\r\n                .map(riding => {\r\n                    const isSelected = this.SelectedRidingID === riding.numeroCirconscription\r\n                        ? 'selected=\"selected\"'\r\n                        : '';\r\n                    return `\r\n                        <option ${isSelected} value=\"${riding.numeroCirconscription}\">\r\n                            ${riding.nomCirconscription}\r\n                        </option>`;\r\n                })\r\n                .join('');\r\n        }\r\n\r\n        // Update the riding currently displayed:\r\n        if (this.SelectedRidingID !== -1) {\r\n            const selectedRiding = results.circonscriptions\r\n                .filter(riding => riding.numeroCirconscription === this.SelectedRidingID);\r\n            this.updateRiding(selectedRiding[0]);\r\n        } else if (results.circonscriptions.length > 0) {\r\n            this.updateRiding(results.circonscriptions[0]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the Riding currently displayed.\r\n     *\r\n     * @param riding Data about the Riding currently displayed.\r\n     */\r\n    protected updateRiding(riding: Circonscription) {\r\n        const ridingCandidatesList = document.getElementById('riding-candidates-list');\r\n        if (ridingCandidatesList !== null) {\r\n            ridingCandidatesList.innerHTML = riding.candidats\r\n                .map((candidate, i) => {\r\n                    const advanceVotes = candidate.nbVoteAvance > 0\r\n                        ? `<span class=\"text-success\">\r\n                                <i class=\"fa fa-caret-up\"></i> ${candidate.nbVoteAvance.toLocaleString()}\r\n                            </span>`\r\n                        : '';\r\n                    return `\r\n                        <tr>\r\n                            <th scope=\"row\" class=\"text-right\">${candidate.nbVoteTotal > 0 ? i + 1 : ''}</th>\r\n                            <td>${candidate.nomPartiPolitique}</td>\r\n                            <td>${candidate.prenom} ${candidate.nom}</td>\r\n                            <td class=\"text-right\">${candidate.nbVoteTotal.toLocaleString()}</td>\r\n                            <td class=\"text-left\">${advanceVotes}</td>\r\n                            <td class=\"text-right\">${candidate.tauxVote.toFixed(2)}&nbsp;<small>%</small></td>\r\n                        </tr>`;\r\n                })\r\n                .join('');\r\n        }\r\n\r\n        const ridingStationsComplete = document.getElementById('riding-stations-complete');\r\n        if (ridingStationsComplete !== null) {\r\n            ridingStationsComplete.innerText = riding.nbBureauComplete.toLocaleString();\r\n        }\r\n\r\n        const ridingStationsTotal = document.getElementById('riding-stations-total');\r\n        if (ridingStationsTotal !== null) {\r\n            ridingStationsTotal.innerText = riding.nbBureauTotal.toLocaleString();\r\n        }\r\n\r\n        const ridingRegisteredVoters = document.getElementById('riding-registered-voters');\r\n        if (ridingRegisteredVoters !== null) {\r\n            ridingRegisteredVoters.innerText = riding.nbElecteurInscrit.toLocaleString();\r\n        }\r\n\r\n        const ridingParticipationRate = document.getElementById('riding-participation-rate');\r\n        if (ridingParticipationRate !== null) {\r\n            const participationRateValue = parseFloat(riding.tauxParticipation);\r\n            const participationRateLabel = isNaN(participationRateValue)\r\n                ? '&mdash;'\r\n                : `${participationRateValue.toFixed(2)}%`;\r\n            ridingParticipationRate.innerHTML = participationRateLabel;\r\n        }\r\n    }\r\n}\r\n","import Application from './application';\r\n\r\n\r\n/**\r\n * Add Chart.js option to display labels at the center of doughnut charts.\r\n *\r\n * This adds the following options to Doughnut charts:\r\n * options = {\r\n *      ...defaultOptions,\r\n *      elements: {\r\n *          center: {\r\n *              text: 'Text label',\r\n *              color: '#fff',\r\n *              verticalOffset: 0,\r\n *              fontStyle: 'Arial'\r\n *          }\r\n *      }\r\n * }\r\n */\r\nChart.pluginService.register({\r\n    beforeDraw: (chart: any) => {\r\n        const centerConfig = chart.config.options.elements.center;\r\n        if (centerConfig) {\r\n            const { ctx } = chart.chart;\r\n\r\n            const fontStyle = centerConfig.fontStyle || 'Arial';\r\n            const text = centerConfig.text || '';\r\n            const color = centerConfig.color || '#000';\r\n            const verticalOffset = centerConfig.verticalOffset || 12;\r\n\r\n            if (text !== '') {\r\n                ctx.textAlign = 'center';\r\n                ctx.textBaseline = 'middle';\r\n                const centerX = (chart.chartArea.left + chart.chartArea.right) / 2;\r\n                const centerY = (chart.chartArea.top + chart.chartArea.bottom) / 2;\r\n                ctx.font = `bolder 1.5rem ${fontStyle}`;\r\n                ctx.fillStyle = color;\r\n                ctx.fillText(text, centerX, centerY - verticalOffset);\r\n\r\n                const ctx2 = chart.chart.ctx;\r\n                ctx2.font = `normal 300 1rem ${fontStyle}`;\r\n                ctx2.fillText('LEADING', centerX, centerY + verticalOffset);\r\n            } else {\r\n                const centerX = (chart.chartArea.left + chart.chartArea.right) / 2;\r\n                const centerY = (chart.chartArea.top + chart.chartArea.bottom) / 2;\r\n\r\n                ctx.textAlign = 'center';\r\n                ctx.textBaseline = 'middle';\r\n                ctx.font = `normal 300 1rem ${fontStyle}`;\r\n                ctx.fillStyle = color;\r\n                ctx.fillText('(NO RESULTS YET)', centerX, centerY);\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n\r\nconst app = new Application();\r\n"],"names":[],"mappings":"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"}